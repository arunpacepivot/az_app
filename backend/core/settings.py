"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from corsheaders.defaults import default_headers
from dotenv import load_dotenv

ROOT_URLCONF = 'core.urls'
WSGI_APPLICATION = 'core.wsgi.application'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-r*3-2bs6)f$e^nec@7rwkkl82)^a5v3r0^siweg9(kd%2^sr_8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if not os.environ.get('PRODUCTION') else False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.contenttypes',
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third party apps
    'rest_framework',
    'corsheaders',
    # Local apps
    'core',
    'health',
    'lister',
    'sp',
    'sb',
    'sd',
    'cerebro',
    'sqp',
    'ngram',
    'topical',
    'logger',
    'amazon_seller',
    'amazon_ads_reports',
    'amazon_auth',
    'authentication',  # Restored authentication app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'logger.middleware.ErrorLoggingMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Load environment variables from .env file
load_dotenv()

# Database configuration
if os.environ.get('GITHUB_WORKFLOW') or not os.environ.get('DB_NAME'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_NAME'),
            'USER': os.environ.get('DB_USER'),
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'HOST': os.environ.get('DB_HOST'),
            'PORT': '5432',
            'OPTIONS': {
                'sslmode': 'require'
            }
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Custom User model
AUTH_USER_MODEL = 'authentication.User'

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# File upload settings
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100 MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600   # 100 MB

# Azure Blob Storage settings
AZURE_STORAGE_CONNECTION_STRING = os.environ.get('AZURE_STORAGE_CONNECTION_STRING', '')
AZURE_CONTAINER_NAME = os.environ.get('AZURE_CONTAINER_NAME', 'tempfiles')
AZURE_BLOB_EXPIRY_HOURS = 4  # Files expire after 4 hours

# Increase timeouts for long-running processes
# 15 minute timeout for requests
REQUEST_TIMEOUT = 900

# Amazon Seller OAuth settings
AMAZON_CLIENT_ID = os.environ.get('AMAZON_CLIENT_ID', '')
AMAZON_CLIENT_SECRET = os.environ.get('AMAZON_CLIENT_SECRET', '')
AMAZON_REDIRECT_URI = os.environ.get('AMAZON_REDIRECT_URI', 'http://localhost:8000/api/v1/amazon/auth/callback')
AMAZON_ADVERTISING_REDIRECT_URI = os.environ.get('AMAZON_ADVERTISING_REDIRECT_URI', 'http://localhost:8000/api/v1/amazon/advertising/auth/callback')
FRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')

# Firebase settings
FIREBASE_API_KEY = os.environ.get('FIREBASE_API_KEY', '')
FIREBASE_AUTH_DOMAIN = os.environ.get('FIREBASE_AUTH_DOMAIN', '')
FIREBASE_PROJECT_ID = os.environ.get('FIREBASE_PROJECT_ID', '')
FIREBASE_STORAGE_BUCKET = os.environ.get('FIREBASE_STORAGE_BUCKET', '')
FIREBASE_MESSAGING_SENDER_ID = os.environ.get('FIREBASE_MESSAGING_SENDER_ID', '')
FIREBASE_APP_ID = os.environ.get('FIREBASE_APP_ID', '')
FIREBASE_DATABASE_URL = os.environ.get('FIREBASE_DATABASE_URL', '')
FIREBASE_PRIVATE_KEY_ID = os.environ.get('FIREBASE_PRIVATE_KEY_ID', '')
FIREBASE_PRIVATE_KEY = os.environ.get('FIREBASE_PRIVATE_KEY', '')
FIREBASE_CLIENT_EMAIL = os.environ.get('FIREBASE_CLIENT_EMAIL', '')
FIREBASE_CLIENT_ID = os.environ.get('FIREBASE_CLIENT_ID', '')
FIREBASE_CLIENT_CERT_URL = os.environ.get('FIREBASE_CLIENT_CERT_URL', '')

# Celery beat schedule for Amazon token refresh (only if Celery is installed)
CELERY_BEAT_SCHEDULE = {}
try:
    from celery.schedules import crontab
    
    # Add our task to the schedule
    CELERY_BEAT_SCHEDULE['refresh-amazon-tokens'] = {
        'task': 'amazon_seller.tasks.refresh_amazon_tokens',
        'schedule': crontab(minute='*/15'),  # Run every 15 minutes
    }
except ImportError:
    # Celery not installed, don't schedule the task
    pass

# Django REST Framework settings 
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'authentication.firebase_auth.FirebaseAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
    # Set longer timeout
    'DEFAULT_TIMEOUT': 900,  # 15 minutes
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React default port
    "https://localhost:3000",
    "http://127.0.0.1:3000",
    "https://127.0.0.1:3000",
    "https://next-frontend-app-a2h4eca5bbe4ekfj.centralindia-01.azurewebsites.net",
    # Add your frontend production domain here

    # Example: "https://yourdomain.azurewebsites.net"
]

CORS_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "https://localhost:3000",
    "http://127.0.0.1:3000",
    "https://127.0.0.1:3000",
    "https://next-frontend-app-a2h4eca5bbe4ekfj.centralindia-01.azurewebsites.net",
]

CORS_ALLOW_CREDENTIALS = True

# If you want to be more permissive during development
CORS_ALLOW_ALL_ORIGINS = False  # Keep this False in production

# Additional CORS settings
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Production security settings
SECURE_SSL_REDIRECT = False  # Set to True in production
SESSION_COOKIE_SECURE = False  # Set to True in production
CSRF_COOKIE_SECURE = False  # Set to True in production
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'level': 'DEBUG',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'app.log'),
            'formatter': 'verbose',
            'level': 'DEBUG',
        },
        'azure_log': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(os.environ.get('TEMP', os.path.join(BASE_DIR, 'logs')), 'azure_app.log'),
            'formatter': 'verbose',
            'level': 'DEBUG',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file', 'azure_log'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['console', 'file', 'azure_log'],
            'level': 'INFO',
            'propagate': False,
        },
        'sp': {
            'handlers': ['console', 'file', 'azure_log'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'ngram': {
            'handlers': ['console', 'file', 'azure_log'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'sqp': {
            'handlers': ['console', 'file', 'azure_log'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'core': {
            'handlers': ['console', 'file', 'azure_log'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'file_service': {
            'handlers': ['console', 'file', 'azure_log'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'authentication': {
            'handlers': ['console', 'file', 'azure_log'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'file', 'azure_log'],
        'level': 'DEBUG',
    },
}

# Ensure log directory exists
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)
os.makedirs(os.path.join(os.environ.get('TEMP', os.path.join(BASE_DIR, 'logs'))), exist_ok=True)

# Add this at the end of the file or near the top
ROOT_URLCONF = 'core.urls'  # Make sure this matches your project structure
WSGI_APPLICATION = 'core.wsgi.application'
